Furthest search and backtrack solution to LeetCode problem "1871. Jump Game VII"

1. Description 
See https://leetcode.com/problems/jump-game-vii/description/ or below. 
The problem is marked "Medium".

You are given a 0-indexed binary string s and two integers minJump and maxJump. In the beginning, 
you are standing at index 0, which is equal to '0'. You can move from index i to index j if the
following conditions are fulfilled:
    i + minJump <= j <= min(i + maxJump, s.length - 1), and
    s[j] == '0'.
Return true if you can reach index s.length - 1 in s, or false otherwise.

Example 1:
Input: s = "011010", minJump = 2, maxJump = 3
Output: true
Explanation:
In the first step, move from index 0 to index 3. 
In the second step, move from index 3 to index 5.

2. My solution
The problem is not harder than "1306. Jump Game III". Essentially they are of the same type ("jump game",
of course). The same recursive solution could apply. However, LeetCode imposes strict constrains 
on runtime and memory, which causes it much more difficult. Thus, an approach faster than recursive 
solution should be designed. 
This solution consists of 4 parts, namely furthest search, backtrack, visit marks and consecutive "1".
P1. Furthest search : Let "a" start from index 0. Jump furthest by "maxJump", if the end location "b"
 has "0" (s[b]), move "a" there, otherwise move "b" back step by step. Vector "va" records each "a".
P2. Backtrack : when (1) "a" becomes near the last element s[c-1], or (2) the jumps in "P1" encounter 
no "0", move "a" back along vector "va"
P3. Visited mark : vector "spot" marks each index visited
P4. Consecutive "1" : "n_conse_1" counts the number of consecutive "1". When it equals "maxJump", 
return "false"

3. Complexity
In the worst case, each index is visited only once, so the time complexity is O(n).

4. Results
Result : submitted to LeetCode and passed all tests with 34ms runtime (beats 97.93% of users with c++)
and 17.82MB memory (beats 89.81% of users with c++)


5. Troubleshooting
I share this for fun with no warranty absolutely. Should anyone find any bugs, please email me.

6. Author
Yiyi HUANG (yhuangcm@connect.ust.hk)

7. License
GPL3.0
